import "hashes/sha256/512bitPacked" as sha256packed;

def main(private field[3] agility, private field[3] power , private field[3] defense , private field[3] fam , field[2] hash1 , field[2] hash2 , field[2] hash3 )  {
    // check for boundaries
    assert(agility[0] < 500 && agility[1] < 500);
    assert(power[0] < 500 && power[1] < 500);
    assert(defense[0] < 500 && defense[1] < 500);
    assert(fam[0] < 5 && fam[1] < 5);

    // compute hashes and verify
    // user1
    field[2] h1 = sha256packed([agility[0], power[0], defense[0], fam[0]]);
    assert(h1[0] == hash1[0]);
    assert(h1[1] == hash1[1]);
    
    // user2
    field[2] h2 = sha256packed([agility[1], power[1], defense[1], fam[1]]);
    assert(h2[0] == hash2[0]);
    assert(h2[1] == hash2[1]);
    
    field[2] h3 = sha256packed([agility[2], power[2], defense[2], fam[2]]);
    assert(h3[0] == hash3[0]);
    assert(h3[1] == hash3[1]);

    assert(agility[0] <= agility[2] && agility[2] <= agility[1]);
    assert(defense[0] <= defense[2] && defense[2] <= defense[1]);
    assert(power[0] <= power[2] && power[2] <= power[1]);
    assert(fam[0] == power[2] || power[2] == power[1]);
    
}
// 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005
// zokrates compute-witness -a 1 2 1 2 1 2 1 2 188899302975664386495359734695811646165 241209053818250468706861181693116169531 108688442111519209029816839697383004379  140204156026660837688781820924590726039